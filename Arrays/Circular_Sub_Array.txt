class Kadane{
    
    // Function to find circular subarray with maximum sum
    // a: input array
    // n: size of array
    static int circularSubarraySum(int a[], int n) {
        
        // Your code here
        return Integer.max(kadane(a,n), reverseKadane(a,n));
    }
    static int kadane(int[]a ,int n)
    {
        int currSum=0;
        int maxSum=Integer.MIN_VALUE;
        for(int i=0;i<n;i++)
        {
         currSum+=a[i];
         if(currSum>maxSum)
         {
             maxSum=currSum;
         }
         if(currSum<0)
         {
             currSum=0;
         }
        }
        return maxSum;
    }
    static int reverseKadane(int[]a,int n)
    {
        if(n==1)
        {
            return a[0];
        }
        int f=Integer.MIN_VALUE;
     int sum=0;
     int currSum=0;
     int maxSum=Integer.MIN_VALUE;
     for(int i=0;i<n;i++)
     {
         sum+=a[i];
         f=Math.max(f,a[i]);
          currSum-=a[i];
           if(currSum>maxSum)
         {
             maxSum=currSum;
         }
         if(currSum<0)
         {
             currSum=0;
         }
         
     }
     if(sum==-maxSum)
     {
         return f;
     }
     
     return sum+maxSum;
    }
    
}