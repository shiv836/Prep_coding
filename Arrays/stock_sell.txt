class Interval {
    int buy, sell;
}

class Solution{
    ArrayList<ArrayList<Integer> > stockBuySell(int A[], int n) {
     ArrayList<Interval> sol = new ArrayList<Interval>();
    
 
        int count = 0;
 
        
 
        // Traverse through given price array
        int i = 0;
        while (i < n - 1) {
            // Find Local Minima. Note that the limit is (n-2) as we are
            // comparing present element to the next element.
            while ((i < n - 1) && (A[i + 1] <= A[i]))
                i++;
 
            // If we reached the end, break as no further solution possible
            if (i == n - 1)
                break;
 
            Interval e = new Interval();
            e.buy = i;
            i=i+1;
            // Store the index of minima
 
            // Find Local Maxima.  Note that the limit is (n-1) as we are
            // comparing to previous element
            while ((i < n) && (A[i] >= A[i - 1]))
                i++;
 
            // Store the index of maxima
            e.sell = i - 1;
            sol.add(e);
 
            // Increment number of buy/sell
            count++;
        }
 
        ArrayList<ArrayList<Integer>> list=new ArrayList<ArrayList<Integer>>();
       for(int j=0;j<sol.size();j++)
       {
       ArrayList<Integer> lister=new ArrayList<>();
       lister.add(sol.get(j).buy);
       lister.add(sol.get(j).sell);
       list.add(lister);
       }
       return list;
    }
}
